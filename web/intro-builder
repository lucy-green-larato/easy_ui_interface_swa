<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>SWA Sales Tools | Intro Builder</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 text-gray-900">
  <header class="border-b bg-white">
    <div class="mx-auto max-w-7xl px-4 py-4 flex items-center justify-between">
      <h1 class="text-xl font-semibold">SWA Sales Tools <span class="text-gray-400">|</span> Larato Best Practice</h1>
      <nav class="hidden md:flex gap-4 text-sm">
        <a class="hover:underline" href="index.html">Home</a>
      </nav>
    </div>
  </header>

  <main class="mx-auto max-w-7xl px-4 py-6 grid grid-cols-1 lg:grid-cols-2 gap-6">
    <!-- Inputs -->
    <section aria-label="Inputs" class="bg-white rounded-2xl shadow p-5">
      <form id="toolForm" class="space-y-4">
        <div>
          <label for="role" class="block text-sm font-medium">Role</label>
          <select id="role" name="role" class="mt-1 w-full rounded-xl border-gray-300 focus:ring-2 focus:ring-blue-600">
            <option value="">Select role…</option>
            <option>C-suite</option>
            <option>Finance</option>
            <option>Operations</option>
            <option>Technical</option>
            <option>Procurement</option>
          </select>
        </div>

        <div class="grid grid-cols-2 gap-4">
          <div>
            <label for="prospect" class="block text-sm font-medium">Prospect name</label>
            <input id="prospect" class="mt-1 w-full rounded-xl border-gray-300" placeholder="Jane Smith"/>
          </div>
          <div>
            <label for="company" class="block text-sm font-medium">Company</label>
            <input id="company" class="mt-1 w-full rounded-xl border-gray-300" placeholder="ABC Tech"/>
          </div>
        </div>

        <div class="grid grid-cols-2 gap-4">
          <div>
            <label for="industry" class="block text-sm font-medium">Industry</label>
            <input id="industry" class="mt-1 w-full rounded-xl border-gray-300" placeholder="Managed Services"/>
          </div>
          <div>
            <label for="competitors" class="block text-sm font-medium">Competitors (optional)</label>
            <input id="competitors" class="mt-1 w-full rounded-xl border-gray-300" placeholder="Competitor X"/>
          </div>
        </div>

        <div>
          <label for="behaviour" class="block text-sm font-medium">Buyer behaviour (paste from Inside Track)</label>
          <textarea id="behaviour" rows="2" class="mt-1 w-full rounded-xl border-gray-300" placeholder="e.g., exploring cloud migration in 6 months; budget review in Q4"></textarea>
        </div>
        <div>
          <label for="drivers" class="block text-sm font-medium">Purchase drivers (paste from Inside Track)</label>
          <textarea id="drivers" rows="2" class="mt-1 w-full rounded-xl border-gray-300" placeholder="e.g., cost reduction, compliance"></textarea>
        </div>
        <div>
          <label for="leaders" class="block text-sm font-medium">Named leaders & contacts (paste from Inside Track)</label>
          <textarea id="leaders" rows="2" class="mt-1 w-full rounded-xl border-gray-300" placeholder="e.g., CIO Jane Smith, Head of Ops John Patel"></textarea>
        </div>

        <div>
          <label for="value" class="block text-sm font-medium">Your value proposition (3 bullets)</label>
          <textarea id="value" rows="3" class="mt-1 w-full rounded-xl border-gray-300" placeholder="• 24/7 local support
• Compliance expertise
• Rapid deployment"></textarea>
        </div>
        <div>
          <label for="cta" class="block text-sm font-medium">CTA / Next step</label>
          <input id="cta" class="mt-1 w-full rounded-xl border-gray-300" placeholder="20-minute intro call next week"/>
        </div>

        <div class="pt-2 flex items-center gap-3">
          <button id="generateBtn" class="px-4 py-2 rounded-xl bg-blue-600 text-white shadow hover:bg-blue-700" type="submit">Generate</button>
          <span id="status" class="text-sm text-gray-500" role="status" aria-live="polite"></span>
        </div>
      </form>
    </section>

    <!-- Output -->
    <section aria-label="Output" class="bg-white rounded-2xl shadow p-5 flex flex-col">
      <div class="flex-1 overflow-auto">
        <h2 class="text-lg font-semibold mb-2">Generated result</h2>
        <article id="result" class="prose max-w-none bg-gray-50 border rounded-xl p-4 min-h-[220px]" aria-live="polite"></article>

        <div class="mt-6">
          <h3 class="text-sm font-semibold">Inside Track insights used</h3>
          <ul id="insights" class="list-disc list-inside text-sm text-gray-700 space-y-1"></ul>
        </div>
      </div>

      <div class="mt-6 flex gap-3">
        <button id="copyBtn" class="px-4 py-2 rounded-xl border shadow-sm">Copy Output</button>
        <button id="downloadBtn" class="px-4 py-2 rounded-xl border shadow-sm">Download TXT</button>
      </div>
    </section>
  </main>

  <footer class="border-t bg-white">
    <div class="mx-auto max-w-7xl px-4 py-4 text-sm text-gray-500 flex items-center justify-between">
      <span>© Larato</span>
      <div class="flex gap-4">
        <a href="privacy.html" class="hover:underline">Privacy</a>
        <a href="index.html" class="hover:underline">Home</a>
      </div>
    </div>
  </footer>

  <script>
    const TOOL = 'intro_builder';   // <-- this page's tool id
    const USE_MOCK = false;          // works now without backend
    const API_URL = "/api/generate";

    const form = document.getElementById('toolForm');
    const result = document.getElementById('result');
    const insights = document.getElementById('insights');
    const statusEl = document.getElementById('status');

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      statusEl.textContent = 'Generating…';
      insights.innerHTML = '';
      result.textContent = '';

      const payload = {
        tool: intro_builder,
        role: form.role.value.trim(),
        prospect: document.getElementById('prospect').value.trim(),
        company: document.getElementById('company').value.trim(),
        industry: document.getElementById('industry').value.trim(),
        competitors: document.getElementById('competitors').value.trim(),
        behaviour: document.getElementById('behaviour').value.trim(),
        drivers: document.getElementById('drivers').value.trim(),
        leaders: document.getElementById('leaders').value.trim(),
        value: document.getElementById('value').value.trim(),
        cta: document.getElementById('cta').value.trim()
      };

      try {
        const data = USE_MOCK ? await mockGenerate(payload) : await callApi(payload);
        renderOutput(data);
        statusEl.textContent = 'Done';
      } catch (err) {
        console.error(err);
        result.textContent = 'Something went wrong. Please try again or contact support.';
        statusEl.textContent = '';
      }
    });

    async function callApi(payload) {
      const res = await fetch(API_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      if (!res.ok) throw new Error('API error');
      return res.json();
    }

    async function mockGenerate(p) {
      const used = pickInsights([p.behaviour, p.drivers, p.leaders]);
      const bullets = (p.value || '').split(/\n|•/).map(s => s.trim()).filter(Boolean).slice(0,3);
      const bulletStr = bullets.length ? bullets.map(b => `- ${b}`).join('\n') : '- Add 2–3 value bullets';
      const content =
`First Introduction for ${p.prospect || 'the contact'} at ${p.company || 'the prospect company'} (${p.role || 'role'}).

Key talking points:
${bulletStr}

Behaviour: ${p.behaviour || '—'}
Drivers: ${p.drivers || '—'}
Competitors: ${p.competitors || '—'}

Next step: ${p.cta || 'Suggest a 20-minute intro call next week.'}`;
      return { content, insightsUsed: used };
    }

    function pickInsights(fields) {
      const arr = [];
      fields.forEach(f => {
        if (!f) return;
        f.split(/\n|;|\.|•|-/).map(s => s.trim()).filter(Boolean).slice(0,3).forEach(x => arr.push(x));
      });
      return arr.slice(0,5);
    }

    function renderOutput(data) {
      result.textContent = data.content || '';
      insights.innerHTML = '';
      (data.insightsUsed || []).forEach(item => {
        const li = document.createElement('li');
        li.textContent = item;
        insights.appendChild(li);
      });
    }

    document.getElementById('copyBtn').addEventListener('click', async () => {
      await navigator.clipboard.writeText(result.textContent || '');
    });
    document.getElementById('downloadBtn').addEventListener('click', () => {
      const blob = new Blob([result.textContent || ''], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url; a.download = 'swa-output.txt';
      document.body.appendChild(a); a.click(); document.body.removeChild(a);
      URL.revokeObjectURL(url);
    });
  </script>
</body>
</html>
